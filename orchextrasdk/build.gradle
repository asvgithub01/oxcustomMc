/*
 * Created by Orchextra
 *
 * Copyright (C) 2016 Gigigo Mobile Services SL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply from: rootProject.file('gradle/checkstyle.gradle')
apply plugin: 'com.github.dcendents.android-maven'

def STRING = "String"
def BOOLEAN = "boolean"
def INT = "int"
def LONG = "long"

def DISABLED_RAGGING = '1'
def MIN_RAGGING_TIME = '10000'
def MAX_RAGGING_TIME = '180000'
def BACKGROUND_BEACONS_SCAN_TIME = '5000'
def BACKGROUND_BEACONS_BEETWEEN_SCAN_TIME = '20000'

buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:2.1.0'
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
  }
}

android {

  compileSdkVersion parent.ext.androidCompileSdkVersion
  buildToolsVersion parent.ext.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion parent.ext.androidMinSdkVersion
    targetSdkVersion parent.ext.androidTargetSdkVersion
    versionCode parent.ext.androidVersionCode
    versionName parent.ext.androidVersionName

    buildConfigField INT, "BACKGROUND_BEACONS_RANGING_TIME", MIN_RAGGING_TIME
    buildConfigField LONG, "BACKGROUND_BEACONS_SCAN_TIME", BACKGROUND_BEACONS_SCAN_TIME
    buildConfigField LONG, "BACKGROUND_BEACONS_BEETWEEN_SCAN_TIME", BACKGROUND_BEACONS_BEETWEEN_SCAN_TIME
    buildConfigField STRING, "API_VERSION", '"v1/"'
    buildConfigField INT, "CONCURRENT_INTERACTORS", '3'
    buildConfigField STRING, "X_APP_SDK", '"ANDROID"'
    buildConfigField STRING, "TOKEN_TYPE_BEARER", '"Bearer"'
    buildConfigField STRING, "IBEACON_LAYOUT_PARSING", '"m:2-3=0215,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25"'

    buildConfigField STRING, "API_URL", '"https://sdk.orchextra.io/"'
  }

  buildTypes {
    debug{
      debuggable true
      buildConfigField STRING, "API_URL", '"https://sdk.s.orchextra.io/"'
    }
    release {
      debuggable true
      buildConfigField STRING, "API_URL", '"https://sdk.orchextra.io/"'
      minifyEnabled false
     // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
    }
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
    incremental false //this is for do Clean pre any Build, do it 4 prevent Dagger no-true-errors
  }

  lintOptions {
    abortOnError false
  }

  // Required due to a conflict due to easy and jmock required for doclava
  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/INDEX.LIST'
  }
  flavorDimensions "play"

  productFlavors {
    play9 {
      dimension "play"
    }
    play8 {
      dimension "play"
    }
    play7 {
      dimension "play"
    }
  }
  // true to publish all flavour artifacts
  publishNonDefault true
  // default build flavour
  defaultPublishConfig "play9Release"
}

configurations {
  play7DebugCompile
  play8DebugCompile
  play9DebugCompile
  play7ReleaseCompile
  play8ReleaseCompile
  play9ReleaseCompile
}


dependencies {

  compile (parent.ext.dependencies.dagger){
    transitive = false
    exclude group:'com.google.dagger', module:'dagger'
    exclude group:'javax.inject'
  }

  apt (parent.ext.dependencies.daggerCompiler){
    transitive = false
    exclude group:'com.google.dagger', module:'dagger'
    exclude group:'javax.inject'
  }

  compile parent.ext.dependencies.loggingInterceptor

  compile parent.ext.dependencies.altBeacon

  play9DebugCompile('com.google.android.gms:play-services-location:9.0.0')
  play9DebugCompile('com.google.android.gms:play-services-gcm:9.0.0')

  play8DebugCompile('com.google.android.gms:play-services-location:8.4.0')
  play8DebugCompile('com.google.android.gms:play-services-gcm:8.4.0')

  play7DebugCompile('com.google.android.gms:play-services-location:7.8.0')
  play7DebugCompile('com.google.android.gms:play-services-gcm:7.8.0')

  play9ReleaseCompile('com.google.android.gms:play-services-location:9.0.0')
  play9ReleaseCompile('com.google.android.gms:play-services-gcm:9.0.0')

  play8ReleaseCompile('com.google.android.gms:play-services-location:8.4.0')
  play8ReleaseCompile('com.google.android.gms:play-services-gcm:8.4.0')

  play7ReleaseCompile('com.google.android.gms:play-services-location:7.8.0')
  play7ReleaseCompile('com.google.android.gms:play-services-gcm:7.8.0')

  compile parent.ext.dependencies.barcodescanner
  compile parent.ext.dependencies.imageRecognitionInterface

  compile project(':orchextrasdk-control')
  compile project(':orchextrasdk-data')
  compile project(':orchextrasdk-domain')

 /* compile( parent.ext.dependencies.gggLib)
          {
            //transitive = true
            changing = true
          }
*/
//compile 'com.github.nuborisar.gigigo-utils-suite:ggglib:5.0'
 // compile parent.ext.dependencies.gggLogger

  testCompile parent.ext.testDependencies.junit
  testCompile parent.ext.testDependencies.mockito

  androidTestCompile parent.ext.testDependencies.testRunner
  androidTestCompile parent.ext.testDependencies.testRules

  androidTestCompile parent.ext.testDependencies.dexMaker
  androidTestCompile(parent.ext.testDependencies.dexMakerMockito) {
    exclude group: 'org.hamcrest', module: 'hamcrest-core'
  }
}

// build a jar with source files
task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

artifacts {
  archives sourcesJar
}
