/*
 * Created by Orchextra
 *
 * Copyright (C) 2016 Gigigo Mobile Services SL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@groovy.transform.Field private java.lang.String checkstyle
apply from: 'dependencies.gradle'
apply from: 'gradle/jacoco.gradle'


buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
   // jcenter()
    mavenCentral()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:2.1.0'
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1"
    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files+
    classpath 'io.realm:realm-gradle-plugin:1.0.0'
  }
}

allprojects {

  ext {

    travisBuild = System.getenv("TRAVIS") == "true"
    jenkinsBuild = System.getenv("GRADLE_HOME") == "true"
    // allows for -Dpre-dex=false to be set
    preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

    // Android config
    androidBuildToolsVersion = '23.0.1'
    androidMinSdkVersion = 10
    androidTargetSdkVersion = 23
    androidCompileSdkVersion = 23
    androidApplicationId = 'com.gigigo.orchextra.sdk'

    versionMajor = 3
    versionMinor = 0
    versionPatch = 0

    androidVersionCode = versionMajor * 1000 + versionMinor * 100 + versionPatch
    androidVersionName = versionMajor + "." + versionMinor + "." + versionPatch
  }

  repositories {
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
    flatDir{
      dirs 'libs'
    }
  }

//  apply plugin:  checkstyle
//
//  task checkstyle(type: Checkstyle) {
//    configFile file("${project.rootDir}/checkstyle.xml")
//    source 'src'
//    include '**/*.java'
//    exclude '**/gen/**'
//
//    classpath = files()
//  }
}
apply plugin: "org.sonarqube"

sonarqube {
  properties {
    property "sonar.sourceEncoding", "UTF-8"
  }
}

subprojects {
  sonarqube {
    properties {
      property "sonar.sources", "src"
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.12'
}
/* add task clean in before run in project configuration
task cleanAll(type: Delete) {
  println("Clean OX Executed")
  subprojects.each {
    it.afterEvaluate {
      def cleanTask = it.tasks.findByName('clean')
      if (cleanTask) {
        dependsOn(cleanTask)
      }
    }
  }
}*/
